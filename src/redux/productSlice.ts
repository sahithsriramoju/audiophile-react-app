import { createEntityAdapter, createSelector, type EntityState } from "@reduxjs/toolkit";
import type { Product, ProductByIdResponse, ProductsByCategoryResponse } from "../types/Product";
import { apiSlice } from "./apiSlice";
import type { RootState } from "./appStore";

//creates normalized entities
export const productAdapter = createEntityAdapter<Product>({
    sortComparer: (a:Product,b:Product) => Number(b.new) - Number(a.new),
})
const initialState = productAdapter.getInitialState();

export const productSlice = apiSlice.injectEndpoints({
    endpoints: (builder) => ({
        getProducts: builder.query<EntityState<Product,string>,void>({
            query:()=>`/products`,
            transformResponse: (res:ProductsByCategoryResponse) => {
                return productAdapter.setAll(initialState,res.products);
            }
        }),
        getProductsByCategory : builder.query<EntityState<Product, string>,string>({
            query : (category) => `/product/category/${category}`,
            transformResponse: (res:ProductsByCategoryResponse) => {
               return productAdapter.setAll(initialState,res.products);
            },
        }),
        getProductById: builder.query<EntityState<Product,string>,string>({
            query: (productId) => `/product/${productId}`,
            transformResponse: (res:ProductByIdResponse) =>{
                return productAdapter.setOne(initialState,res.product)
            }
        })
    })
})



export const {
    useGetProductsQuery,
    useGetProductsByCategoryQuery,
    useGetProductByIdQuery
} = productSlice

//creates and exports a custom selector function for RTK Query. 
//.select(): It's a memoized selector factory generated by RTK Query. 
// This function, when called with the Redux state, 
// will retrieve the cached data for that specific endpoint and category combination

export const selectProductsResult = productSlice.endpoints.getProducts.select();

export const selectProductsData = 
 createSelector(
    selectProductsResult,
    (productsResult) => (
        (productsResult as { data?: EntityState<Product, string> } | undefined)?.data ?? initialState
    )
 );

export const {
    selectAll: selectProducts,
    selectById: selectProductById,
    selectIds: selectProductIds
} = productAdapter.getSelectors((state: RootState) => selectProductsData(state))

